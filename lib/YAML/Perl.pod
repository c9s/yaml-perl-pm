=encoding utf8

=head1 NAME

YAML::Perl - Pure Perl Port of PyYAML

=head1 WARNING

This is a very early release. Don't even bother to try this version.

Still here?

If you just want to play around, the Dump/Load API is working, but
throws errors often.

You can play with it by using:

    ysh -MYAML::Perl

Also the streaming API described below is working, but still chokes on
the same things that the Dump/Load API does.

=head1 SYNOPSIS

    use YAML::Perl;

    my $data = {
        name => 'Ingy döt Net',
        modules => [
            'YAML', 'YAML::Old', 'YAML::Perl', YAML::XS'
        ],
    };

    my $yaml = <<'...';
    ---
    modules:
    - YAML
    - YAML::Old
    - YAML::Perl
    - YAML::XS
    name: Ingy döt Net
    ...

    # Simple, familiar, Dump/Load API
    my $yaml2 = Dump $data;
    my $data2 = Load $yaml;

    # New dump API:
    my $yaml3 = YAML::Perl->new->dumper(%options)->dump($data);

    # New load API
    my $data3 = YAML::Perl->new->loader(%options)->open($yaml)->load();

    # New Streaming Parser/Emitter API
    my @events;
    my $yaml4;
    my $parser = YAML::Perl->new->parser->open($yaml);
    my $emitter = YAML::Perl->new-emitter->open($yaml4);
    while (my $event = $parser->parse()) {
        # Do various things with events here
        $emitter->emit($event);
    }
    $emitter->close;
    print $yaml4;

=head1 DESCRIPTION

PyYAML is the most robust and correct YAML module for a dynamic
language. It is (obviously) written in/for Python. This module is a
complete port of PyYAML to Perl.

=head1 STREAMING API

YAML::Parser reads a YAML serialization stream and produces
events. YAML::Emitter takes YAML events and produces a YAML
serialization stream.

Both of these modules allow you to process all the yaml/events at once,
or do things one event at a time. If you call the YAML::Parser
C<parse()> method in list context, you get all the remaining event
objects. If you call it in scalar context, you get the next event.

The YAML::Emitter C<emit()> method takes one or more event objects as
input arguments.

=head1 AUTHOR

Ingy döt Net <ingy@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2008. Ingy döt Net.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See http://www.perl.com/perl/misc/Artistic.html

=cut
